<?php

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateSubscriptionSystemTables extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('bills', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->morphs('billable');
            $table->{$this->jsonable()}('details')->nullable();
            $table->float('due_amount');
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('consumptions', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->morphs('consumable');
            $table->morphs('consumer');
            $table->{$this->jsonable()}('details')->nullable();
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('bill_consumptions', function (Blueprint $table) {
            $table->primary(['bill_id', 'consumption_id']);

            $table->foreignId('bill_id')->constrained();
            $table->foreignId('consumption_id')->constrained();
            $table->unique('consumption_id');
        });

        Schema::create('collections', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->float('amount');
            $table->{$this->jsonable()}('details')->nullable();
            $table->timestamps();

            $table->foreignId('bill_id')->constrained();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::drop('collections');
        Schema::drop('bill_consumptions');
        Schema::drop('consumptions');
        Schema::drop('bills');
    }

    /**
     * Get jsonable column data type.
     *
     * @return string
     */
    protected function jsonable(): string
    {
        $driverName = DB::connection()->getPdo()->getAttribute(PDO::ATTR_DRIVER_NAME);
        $dbVersion = DB::connection()->getPdo()->getAttribute(PDO::ATTR_SERVER_VERSION);
        $isOldVersion = version_compare($dbVersion, '5.7.8', 'lt');

        return $driverName === 'mysql' && $isOldVersion ? 'text' : 'json';
    }
}
